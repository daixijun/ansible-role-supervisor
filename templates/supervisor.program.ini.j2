[program:{{ item.programname }}]
command={{ item.command }}            ; the program (relative uses PATH, can take args)
{% if item.numprocs|default(1) > 1 %}
process_name=%(program_name)s_%(process_num)02d
{% else %}
process_name=%(program_name)s ; process_name expr (default %(program_name)s)
{% endif %}
numprocs={{ item.numprocs | default(1) }}       ; number of processes copies to start (def 1)
directory={{ item.directory | default('/tmp') }}               ; directory to cwd to before exec (def no cwd)
umask=022                     ; umask for process (default None)
user={{ item.user|default('root') }}
priority=999                  ; the relative start priority (default 999)
autostart=true                ; start at supervisord start (default: true)
autorestart={{ item.autorestart | default("unexpected") }}        ; whether/when to restart (default: unexpected)
startsecs=1                   ; number of secs prog must stay running (def. 1)
startretries=3                ; max # of serial start failures (default 3)
exitcodes=0                 ; 'expected' exit codes for process (default 0)
stopsignal={{ item.stopsignal | default('TERM') }}               ; signal used to kill process (default TERM)
stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
stopasgroup=true             ; send stop signal to the UNIX process group (default false)
killasgroup=true             ; SIGKILL the UNIX process group (def false)
redirect_stderr=false          ; redirect proc stderr to stdout (default false)
stdout_logfile={{ supervisor_log_dir }}/%(program_name)s.stdout.log        ; stdout log path, NONE for none; default AUTO
stdout_logfile_maxbytes=10MB   ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
; stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
stdout_events_enabled={{ item.stdout_events_enabled | default(false) }}   ; emit events on stdout writes (default false)
stderr_logfile={{ supervisor_log_dir }}/%(program_name)s.stderr.log        ; stderr log path, NONE for none; default AUTO
stderr_logfile_maxbytes=10MB   ; max # logfile bytes b4 rotation (default 50MB)
stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)
; stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
stderr_events_enabled={{ item.stderr_events_enabled | default(false) }}   ; emit events on stderr writes (default false)
{% if item.environment|default('') %}
environment={{ item.environment }}       ; process environment additions (def no adds)
{% else %}
; environment=A="A";B="B"
{% endif %}
serverurl=AUTO                ; override serverurl computation (childutils)
